//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/GameControlls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @GameControlls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @GameControlls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""GameControlls"",
    ""maps"": [
        {
            ""name"": ""GamePlayControlls"",
            ""id"": ""e1ce43cc-9b58-4e58-bdfb-6611eba70aec"",
            ""actions"": [
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""ec82edc7-ad0b-43fc-828d-efe54e28b9b8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Glide"",
                    ""type"": ""Value"",
                    ""id"": ""285cebe9-09c3-43fc-8524-3ade163ef596"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=2)"",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Dive"",
                    ""type"": ""Value"",
                    ""id"": ""983e2d61-21e6-4298-a2d3-6d988e4b41ab"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=2)"",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""25157293-bb3e-437e-990e-72f5237a56af"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9d5ed18e-7979-46d1-990e-aaec50c6dd70"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c66f1ed5-a7f6-4321-8be3-640320824077"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Glide"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1d3310f1-8d2d-4e2c-8805-17def3808757"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Glide"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9e58f21f-1afa-49a0-9f27-4acd26019d1e"",
                    ""path"": ""<Gamepad>/leftStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Glide"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""55519b70-89d8-46b1-b0ec-f36444d644cc"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Dive"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2355d6d7-6de6-4262-8838-78b3d2767044"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Dive"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""20f0e2b2-8291-4a1f-9aa3-bf3319ac525b"",
                    ""path"": ""<Gamepad>/leftStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Dive"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // GamePlayControlls
        m_GamePlayControlls = asset.FindActionMap("GamePlayControlls", throwIfNotFound: true);
        m_GamePlayControlls_Jump = m_GamePlayControlls.FindAction("Jump", throwIfNotFound: true);
        m_GamePlayControlls_Glide = m_GamePlayControlls.FindAction("Glide", throwIfNotFound: true);
        m_GamePlayControlls_Dive = m_GamePlayControlls.FindAction("Dive", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // GamePlayControlls
    private readonly InputActionMap m_GamePlayControlls;
    private IGamePlayControllsActions m_GamePlayControllsActionsCallbackInterface;
    private readonly InputAction m_GamePlayControlls_Jump;
    private readonly InputAction m_GamePlayControlls_Glide;
    private readonly InputAction m_GamePlayControlls_Dive;
    public struct GamePlayControllsActions
    {
        private @GameControlls m_Wrapper;
        public GamePlayControllsActions(@GameControlls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Jump => m_Wrapper.m_GamePlayControlls_Jump;
        public InputAction @Glide => m_Wrapper.m_GamePlayControlls_Glide;
        public InputAction @Dive => m_Wrapper.m_GamePlayControlls_Dive;
        public InputActionMap Get() { return m_Wrapper.m_GamePlayControlls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GamePlayControllsActions set) { return set.Get(); }
        public void SetCallbacks(IGamePlayControllsActions instance)
        {
            if (m_Wrapper.m_GamePlayControllsActionsCallbackInterface != null)
            {
                @Jump.started -= m_Wrapper.m_GamePlayControllsActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_GamePlayControllsActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_GamePlayControllsActionsCallbackInterface.OnJump;
                @Glide.started -= m_Wrapper.m_GamePlayControllsActionsCallbackInterface.OnGlide;
                @Glide.performed -= m_Wrapper.m_GamePlayControllsActionsCallbackInterface.OnGlide;
                @Glide.canceled -= m_Wrapper.m_GamePlayControllsActionsCallbackInterface.OnGlide;
                @Dive.started -= m_Wrapper.m_GamePlayControllsActionsCallbackInterface.OnDive;
                @Dive.performed -= m_Wrapper.m_GamePlayControllsActionsCallbackInterface.OnDive;
                @Dive.canceled -= m_Wrapper.m_GamePlayControllsActionsCallbackInterface.OnDive;
            }
            m_Wrapper.m_GamePlayControllsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @Glide.started += instance.OnGlide;
                @Glide.performed += instance.OnGlide;
                @Glide.canceled += instance.OnGlide;
                @Dive.started += instance.OnDive;
                @Dive.performed += instance.OnDive;
                @Dive.canceled += instance.OnDive;
            }
        }
    }
    public GamePlayControllsActions @GamePlayControlls => new GamePlayControllsActions(this);
    public interface IGamePlayControllsActions
    {
        void OnJump(InputAction.CallbackContext context);
        void OnGlide(InputAction.CallbackContext context);
        void OnDive(InputAction.CallbackContext context);
    }
}
