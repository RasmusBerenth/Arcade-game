//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/GameControlls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @GameControlls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @GameControlls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""GameControlls"",
    ""maps"": [
        {
            ""name"": ""KeyboardControlls"",
            ""id"": ""e1ce43cc-9b58-4e58-bdfb-6611eba70aec"",
            ""actions"": [
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""ec82edc7-ad0b-43fc-828d-efe54e28b9b8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Glide"",
                    ""type"": ""Button"",
                    ""id"": ""b07ef39f-0aa7-4f58-a933-61aa2a2d2993"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Dive"",
                    ""type"": ""PassThrough"",
                    ""id"": ""c02a83f0-cb89-4f50-8c08-d1e17107cd70"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""AirManuver"",
                    ""type"": ""Value"",
                    ""id"": ""8969c555-c09a-4f04-9af9-8e54bc730dfd"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""25157293-bb3e-437e-990e-72f5237a56af"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ee60ccd5-8d89-4db8-927f-2c2e6fba782a"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Glide"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9c223f8e-3361-400f-9bf2-22aac3f58e57"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Dive"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""78349c9f-8b5f-4b93-b6fb-603085a4e986"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AirManuver"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""2ef03d0d-8e89-4210-8715-2c162260dbdf"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AirManuver"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""f372b236-a01f-4757-bda8-c697edcbca16"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AirManuver"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // KeyboardControlls
        m_KeyboardControlls = asset.FindActionMap("KeyboardControlls", throwIfNotFound: true);
        m_KeyboardControlls_Jump = m_KeyboardControlls.FindAction("Jump", throwIfNotFound: true);
        m_KeyboardControlls_Glide = m_KeyboardControlls.FindAction("Glide", throwIfNotFound: true);
        m_KeyboardControlls_Dive = m_KeyboardControlls.FindAction("Dive", throwIfNotFound: true);
        m_KeyboardControlls_AirManuver = m_KeyboardControlls.FindAction("AirManuver", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // KeyboardControlls
    private readonly InputActionMap m_KeyboardControlls;
    private IKeyboardControllsActions m_KeyboardControllsActionsCallbackInterface;
    private readonly InputAction m_KeyboardControlls_Jump;
    private readonly InputAction m_KeyboardControlls_Glide;
    private readonly InputAction m_KeyboardControlls_Dive;
    private readonly InputAction m_KeyboardControlls_AirManuver;
    public struct KeyboardControllsActions
    {
        private @GameControlls m_Wrapper;
        public KeyboardControllsActions(@GameControlls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Jump => m_Wrapper.m_KeyboardControlls_Jump;
        public InputAction @Glide => m_Wrapper.m_KeyboardControlls_Glide;
        public InputAction @Dive => m_Wrapper.m_KeyboardControlls_Dive;
        public InputAction @AirManuver => m_Wrapper.m_KeyboardControlls_AirManuver;
        public InputActionMap Get() { return m_Wrapper.m_KeyboardControlls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(KeyboardControllsActions set) { return set.Get(); }
        public void SetCallbacks(IKeyboardControllsActions instance)
        {
            if (m_Wrapper.m_KeyboardControllsActionsCallbackInterface != null)
            {
                @Jump.started -= m_Wrapper.m_KeyboardControllsActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_KeyboardControllsActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_KeyboardControllsActionsCallbackInterface.OnJump;
                @Glide.started -= m_Wrapper.m_KeyboardControllsActionsCallbackInterface.OnGlide;
                @Glide.performed -= m_Wrapper.m_KeyboardControllsActionsCallbackInterface.OnGlide;
                @Glide.canceled -= m_Wrapper.m_KeyboardControllsActionsCallbackInterface.OnGlide;
                @Dive.started -= m_Wrapper.m_KeyboardControllsActionsCallbackInterface.OnDive;
                @Dive.performed -= m_Wrapper.m_KeyboardControllsActionsCallbackInterface.OnDive;
                @Dive.canceled -= m_Wrapper.m_KeyboardControllsActionsCallbackInterface.OnDive;
                @AirManuver.started -= m_Wrapper.m_KeyboardControllsActionsCallbackInterface.OnAirManuver;
                @AirManuver.performed -= m_Wrapper.m_KeyboardControllsActionsCallbackInterface.OnAirManuver;
                @AirManuver.canceled -= m_Wrapper.m_KeyboardControllsActionsCallbackInterface.OnAirManuver;
            }
            m_Wrapper.m_KeyboardControllsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @Glide.started += instance.OnGlide;
                @Glide.performed += instance.OnGlide;
                @Glide.canceled += instance.OnGlide;
                @Dive.started += instance.OnDive;
                @Dive.performed += instance.OnDive;
                @Dive.canceled += instance.OnDive;
                @AirManuver.started += instance.OnAirManuver;
                @AirManuver.performed += instance.OnAirManuver;
                @AirManuver.canceled += instance.OnAirManuver;
            }
        }
    }
    public KeyboardControllsActions @KeyboardControlls => new KeyboardControllsActions(this);
    public interface IKeyboardControllsActions
    {
        void OnJump(InputAction.CallbackContext context);
        void OnGlide(InputAction.CallbackContext context);
        void OnDive(InputAction.CallbackContext context);
        void OnAirManuver(InputAction.CallbackContext context);
    }
}
